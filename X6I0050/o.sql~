--creation de la fonction d'effaçage

spool projet.log
set serveroutput on;

DROP TABLE Localisations CASCADE CONSTRAINTS;
DROP TABLE Caracteristiques CASCADE CONSTRAINTS;
DROP TABLE Techniques CASCADE CONSTRAINTS;
DROP TABLE InfosZones CASCADE CONSTRAINTS;

CREATE TABLE Techniques(
	capacite VARCHAR2(15),
	type1 VARCHAR2(10),
	PRIMARY KEY (type1)
);

CREATE TABLE Caracteristiques(
	num NUMBER NOT NULL,
	nom VARCHAR2(15),
	vie NUMBER NOT NULL,
	attaque NUMBER NOT NULL,
	defense NUMBER NOT NULL,
	attSpe NUMBER NOT NULL,
	defSpe NUMBER NOT NULL,
	vitesse NUMBER NOT NULL,
	type1 VARCHAR2(10),
	type2 VARCHAR2(10),
	taille NUMBER(4,2) NOT NULL,
	poids NUMBER(5,2) NOT NULL,
	preEvolution NUMBER,
	postEvolution NUMBER,
	arene VARCHAR2(25),
	apparition VARCHAR2(50),
	PRIMARY KEY (num),
	CONSTRAINT type1_FK FOREIGN KEY(type1) REFERENCES Techniques(type1) 
);
--ajouter des contraintes mofo
CREATE TABLE InfosZones(
	zone VARCHAR2(15),
	niveau NUMBER,
	PRIMARY KEY (zone)
);

CREATE TABLE Localisations(
	num NUMBER NOT NULL,
	zone VARCHAR2(15),
	capturable NUMBER(1),
	PRIMARY KEY(num, zone), 
	CONSTRAINT num_FK FOREIGN KEY(num) REFERENCES Caracteristiques(num),
	CONSTRAINT zone_FK FOREIGN KEY(zone) REFERENCES InfosZones(zone)
);

CREATE OR REPLACE PROCEDURE ajouterPokemon(numero IN NUMBER,
	nm IN Caracteristiques.nom %type,
	att IN NUMBER,
	defp IN NUMBER,
	life IN NUMBER,
	attS IN NUMBER,
	defS IN NUMBER,
	vit IN NUMBER,
	t1 IN Caracteristiques.type1 %type,
	t2 IN Caracteristiques.type1 %type,
	height IN Caracteristiques.taille %type,
	weight IN Caracteristiques.poids %type,
	preE IN Caracteristiques.postEvolution %type,
	postE IN Caracteristiques.postEvolution %type,
	arena IN Caracteristiques.arene %type,
	app IN Caracteristiques.apparition %type)	
	IS	
	nu INT;
	deja_present EXCEPTION;
BEGIN

	select count(*) INTO nu from Caracteristiques
	where Caracteristiques.num = numero;
	
    IF (nu > 0)
        THEN
    	RAISE deja_present;
    ELSE
		INSERT INTO Caracteristiques VALUES(numero, nm, life, att, defp, attS, defS, vit, t1, t2, weight, height, preE, postE, arena, app); 
	END IF;
	
EXCEPTION
	WHEN deja_present THEN RAISE_APPLICATION_ERROR(-20002, 'Pokemon deja present');

END;
/

CREATE OR REPLACE PROCEDURE ajoutTech(typ In techniques.type1 %type, capac in techniques.capacite %type)
IS
	ty NUMBER;
BEGIN
	select count(*) INTO ty from Techniques
	where Techniques.type1 = typ;
	
    IF (ty > 0)
        THEN
    	UPDATE Techniques SET Techniques.capacite = capac WHERE Techniques.type1 = typ;
    ELSE
		Insert into Techniques values (capac, typ);
	END IF;
END;
/

CREATE OR REPLACE PROCEDURE ajoutLocal(nu In localisations.num %type, zon in localisations.zone %type, capt in localisations.capturable %type)
IS
	deja_dedans INT;
	nb_poke INT;
	deja_present EXCEPTION;
	pas_de_poke EXCEPTION;
BEGIN
	select count(*) INTO deja_dedans from Localisations
	where Localisations.num = nu AND Localisations.zone = zon;
	
	
    IF (deja_dedans > 0)
        THEN
    	RAISE deja_present;
    ELSE
    	select count(*) INTO nb_poke from Caracteristiques
    	where Caracteristiques.num = nu;
    	
    	IF (nb_poke = 0)
        	THEN
    		RAISE pas_de_poke;
    	ELSE
			Insert into Localisations values (nu, zon, capt);
		End IF;
	END IF;
	
EXCEPTION
	WHEN deja_present THEN RAISE_APPLICATION_ERROR(-20004, 'Localisation deja presente');
	WHEN pas_de_poke THEN RAISE_APPLICATION_ERROR(-20005, 'aucun pokemon n''a été rentré dans la BD avec ce numéro');
END;
/

CREATE OR REPLACE PROCEDURE ajoutZone(zon In InfosZones.zone %type, niv in InfosZones.niveau %type)
IS
	zo NUMBER;
BEGIN
	select count(*) INTO zo from InfosZones
	where InfosZones.zone = zon;
	
    IF(zo > 0)
        THEN
		UPDATE InfosZones SET InfosZones.niveau = niv WHERE InfosZones.zone = zon;
    ELSE
		Insert into InfosZones values (zon, niv);
	END IF;
END;
/

create or replace trigger pre_bef_ins_upd
	before insert or update
	on caracteristiques 
	for each row
when (new.preEvolution <> null)	
declare
	numEvo number;
	preE number;
	numAct number;
	newNom varchar2(15);
	evolution_error EXCEPTION;
begin
	preE := :new.preEvolution;
	numAct := :new.num;
	newNom := :new.nom;
	if (preE <> (numAct -1))
		then 
		if not((newNom = 'Aquali' or newNom = 'Voltali' or newNom = 'Pyroli') and preE = 133)
			then raise evolution_error; 
		end if;		
	else
		select count(*) into numEvo from Caracteristiques where Caracteristiques.num = preE;
		if numEvo = 0 then
			dbms_output.put_line('Cette preEvolution est absente de la base de donnée. Vous pourrier ajouter le pokémon numéro '||preE||' par exemple');
		end if;
	end if;
	
exception 
	when evolution_error then
		dbms_output.put_line('Pre evolution incorrecte');
end;
/

create or replace trigger post_bef_ins_upd
	before insert or update
	on caracteristiques
	for each row
when (new.postEvolution <> null)
declare
	numEvo number;
	postE number;
	numAct number;
	newNom varchar2(15);
	evolution_error EXCEPTION;
begin 
	postE := :new.postEvolution;
	numAct := :new.num;
	newNom := :new.nom;		
	if (postE <> (numAct +1))
		then 
		if not((newNom = 'Evoli') and (postE = 134 or postE = 135))
			then raise evolution_error; 
		end if;		
	select count(*) into numEvo from Caracteristiques where Caracteristiques.num = postE;
		if numEvo = 0 then
			dbms_output.put_line('Cette postEvolution est absente de la base de donnée. Vous pourrier ajouter le pokémon numéro '||postE||' par exemple');
		end if;
	end if;
exception 
	when evolution_error then
		dbms_output.put_line('Post evolution incorrecte');
end;		
/	

create or replace trigger type_bef_ins_upd
	BEFORE insert or update
	on caracteristiques
	for each row
--when (new.type1 <> null)
declare
	nbtmp NUMBER;
	rekete varchar2(200);
	type1tmp VARCHAR2(10);
begin
	type1tmp := :new.type1;
	select count(*) into nbtmp from techniques where techniques.type1 = type1tmp;
	if nbtmp = 0 then
		rekete:= 'insert into Techniques(capacite, type1) values (''plante'', ''plante'')' ;
		dbms_output.put_line(rekete);
		execute immediate (rekete);
		dbms_output.put_line('type ajoute a la table technique');
		
	end if;
end;
/		

create or replace trigger zone_bef_ins_upd
	before insert or update
	on Localisations
	for each row
when (new.zone <> null) 
declare
	newzone VARCHAR2(20);
	nbzone number;
begin
	newzone := :new.zone;
	select count(*) into nbzone from InfosZones where InfosZones.zone = newzone;
	if nbzone = 0 then
		insert into InfosZones values (newzone, null);
		dbms_output.put_line('Zone ajoutée a la table InfosZone');
	end if;
end;
/
/*
GRANT INSERT, UPDATE ON Caracteristiques to L3_2;
GRANT INSERT, UPDATE ON techniques to L3_2;
GRANT INSERT, UPDATE ON InfosZones to L3_2;
GRANT INSERT, UPDATE ON Localisations to L3_2;

GRANT SELECT ON Caracteristiques to L3_2 WITH GRANT OPTION;
GRANT SELECT ON techniques to L3_2 WITH GRANT OPTION;
GRANT SELECT ON InfosZones to L3_2 WITH GRANT OPTION;
GRANT SELECT ON Localisations to L3_2 WITH GRANT OPTION;

GRANT SELECT ON Caracteristiques to L3_1;
GRANT SELECT ON techniques to L3_1;
GRANT SELECT ON InfosZones to L3_1;
GRANT SELECT ON Localisations to L3_1;
*/
alter trigger zone_bef_ins_upd enable;
alter trigger type_bef_ins_upd enable;
alter trigger post_bef_ins_upd enable;
alter trigger pre_bef_ins_upd enable;
--associer vue aux roles
create or replace view plantes as 
	select nom,num from Caracteristiques
	where type1='plante';
insert into Techniques values ('eau', 'eau');
execute ajouterpokemon(001, 'bulbite', 55, 45, 65, 315, 25, 200, 'plante', 'poison', 50.5, 0.2, null, 002, '', 'film 1');
select * from techniques;
spool off

